
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { Product } from "@/types/product";

interface OrderData {
  product: Product;
  customerInfo?: {
    name?: string;
    phone?: string;
    size?: string;
    comments?: string;
  };
}

export const useOrderSubmission = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const submitOrder = async (orderData: OrderData, webhookUrl?: string) => {
    setIsSubmitting(true);
    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞:", orderData);

    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (—á–µ—Ä–µ–∑ Telegram Web App API)
      if (window.Telegram?.WebApp) {
        const telegramData = {
          product_name: orderData.product.name,
          product_price: orderData.product.price,
          product_category: orderData.product.category,
          customer_info: orderData.customerInfo,
          timestamp: new Date().toISOString(),
        };

        window.Telegram.WebApp.sendData(JSON.stringify(telegramData));
        console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram:", telegramData);
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook –≤ n8n —Å –ø–ª–æ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
      if (webhookUrl) {
        const webhookData = {
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
          product_id: orderData.product.id,
          product_name: orderData.product.name,
          product_description: orderData.product.description,
          product_price: orderData.product.price,
          product_category: orderData.product.category,
          product_image: orderData.product.image,
          product_is_new: orderData.product.isNew || false,
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
          customer_name: orderData.customerInfo?.name || "",
          customer_phone: orderData.customerInfo?.phone || "",
          customer_size: orderData.customerInfo?.size || "",
          customer_comments: orderData.customerInfo?.comments || "",
          
          // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          source: "telegram_mini_app",
          timestamp: new Date().toISOString(),
          order_date: new Date().toLocaleDateString('ru-RU'),
          order_time: new Date().toLocaleTimeString('ru-RU'),
        };

        await fetch(webhookUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          mode: "no-cors",
          body: JSON.stringify(webhookData),
        });
        console.log("Webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ n8n —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:", webhookData);
      }

      toast({
        title: "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üíï",
        description: "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
      });

      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:", error);
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é",
        variant: "destructive",
      });
      return false;
    } finally {
      setIsSubmitting(false);
    }
  };

  return { submitOrder, isSubmitting };
};
