
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";

interface Product {
  id: string;
  name: string;
  description: string;
  price: string;
  image: string;
  category: string;
  isNew?: boolean;
}

interface OrderData {
  product: Product;
  customerInfo?: {
    name?: string;
    phone?: string;
    size?: string;
    comments?: string;
  };
}

export const useOrderSubmission = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const submitOrder = async (orderData: OrderData, webhookUrl?: string) => {
    setIsSubmitting(true);
    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞:", orderData);

    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (—á–µ—Ä–µ–∑ Telegram Web App API)
      if (window.Telegram?.WebApp) {
        const telegramData = {
          product_name: orderData.product.name,
          product_price: orderData.product.price,
          product_category: orderData.product.category,
          customer_info: orderData.customerInfo,
          timestamp: new Date().toISOString(),
        };

        window.Telegram.WebApp.sendData(JSON.stringify(telegramData));
        console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram:", telegramData);
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook –≤ n8n
      if (webhookUrl) {
        await fetch(webhookUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          mode: "no-cors",
          body: JSON.stringify({
            order: orderData,
            source: "telegram_mini_app",
            timestamp: new Date().toISOString(),
          }),
        });
        console.log("Webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ n8n");
      }

      toast({
        title: "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üíï",
        description: "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
      });

      return true;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:", error);
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é",
        variant: "destructive",
      });
      return false;
    } finally {
      setIsSubmitting(false);
    }
  };

  return { submitOrder, isSubmitting };
};
